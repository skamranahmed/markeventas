name: Deploy to AWS ECR and then to AWS EKS

# this workflow will be triggered whenever there is a push to the 'master' branch
on:
  push:
    branches: [master]

jobs:

  deploy:
    name: Build image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.23.5' # https://storage.googleapis.com/kubernetes-release/release/stable.txt
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: twitter-space-gcal-event
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Update kube config
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy image to Amazon EKS
        run: |
          kubectl apply -f infra/k8s/production/aws-auth.yaml
          kubectl apply -f infra/k8s/production/deployment.yaml
          kubectl rollout restart deployment twitter-space-gcal-event-deployment
          kubectl apply -f infra/k8s/production/service.yaml
          kubectl apply -f infra/k8s/production/issuer.yaml
          kubectl apply -f infra/k8s/production/ingress.yaml