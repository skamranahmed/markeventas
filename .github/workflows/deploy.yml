name: Deploy to AWS ECR and then to AWS EKS

# this workflow will be triggered whenever there is a push to the 'master' branch
on:
  push:
    branches: [master]

jobs:

  deploy:
    name: Build image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.23.5' # https://storage.googleapis.com/kubernetes-release/release/stable.txt
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: twitter-space-gcal-event
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Update kube config
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy image to Amazon EKS
        run: |
          kubectl apply -f infra/k8s/production/aws-auth.yaml
          kubectl apply -f infra/k8s/production/deployment.yaml
          kubectl rollout restart deployment twitter-space-gcal-event-deployment
          kubectl apply -f infra/k8s/production/service.yaml
          kubectl apply -f infra/k8s/production/issuer.yaml
          kubectl apply -f infra/k8s/production/ingress.yaml

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: [deploy] # run this workflow only when the "deploy" workflow succeeds

    steps:
      - name: send notification on slack
        uses: abinoda/slack-action@master
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        # with:
        #   args: |
        #     {
        #       "channel":"${{ secrets.SLACK_CI_CD_CHANNEL_ID }}",
        #       "blocks": [
        #         {
        #           "type": "section",
        #           "text": {
        #             "type": "mrkdwn",
        #             "text": "*Deployed to EKS*! :grin:"
        #           }
        #         },
        #         {
        #           "type": "divider"
        #         },
        #         {
        #           "type": "section",
        #           "fields": [
        #             {
        #               "type": "mrkdwn",
        #               "text": "*Project*:\n${{ github.event.repository.name }}"
        #             },
        #             {
        #               "type": "mrkdwn",
        #               "text": "*When*:\n$(TZ='Asia/Kolkata' date +'%m/%d/%Y %T')"
        #             },
        #             {
        #               "type": "mrkdwn",
        #               "text": "*Branch*:\n${{ GITHUB_REF_NAME }}"
        #             },
        #             {
        #               "type": "mrkdwn",
        #               "text": "*Author*:\n${{ github.event.pusher.name }}"
        #             }
        #           ],
        #           "accessory": {
        #             "type": "image",
        #             "image_url": "https://media.giphy.com/media/cXblnKXr2BQOaYnTni/giphy.gif",
        #             "alt_text": "Happy Gif"
        #           }
        #         },
        #         {
        #           "type": "actions",
        #           "elements": [
        #             {
        #               "type": "button",
        #               "text": {
        #                 "type": "plain_text",
        #                 "text": "View Workflow"
        #               },
        #               "url": "https://github.com/skamranahmed/markeventas/runs/${{ github.run_id }}"
        #             }
        #           ]
        #         }
        #       ]
        #     }

        with:
          args: '{\"channel\":\"${{secrets.SLACK_CI_CD_CHANNEL_ID}}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*DeployedtoEKS*!:grin:\"}},{\"type\":\"divider\"},{\"type\":\"section\",\"fields\":[{\"type\":\"mrkdwn\",\"text\":\"*Project*:\\n${{github.event.repository.name}}\"},{\"type\":\"mrkdwn\",\"text\":\"*Author*:\\n${{github.event.pusher.name}}\"}],\"accessory\":{\"type\":\"image\",\"image_url\":\"https://media.giphy.com/media/cXblnKXr2BQOaYnTni/giphy.gif\",\"alt_text\":\"HappyGif\"}}]}' 
        if: success()

        # env:
        #   # required
        #   SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        # with:
        #   # custom message to send to slack
          # args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}'